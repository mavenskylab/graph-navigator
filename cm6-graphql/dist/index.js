import { getTokenAtPosition, getTypeInfo, getAutocompleteSuggestions, getDiagnostics } from 'graphql-language-service';
import { StateEffect, StateField } from '@codemirror/state';
import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { EditorView } from '@codemirror/view';
import { linter } from '@codemirror/lint';
import { validateSchema } from 'graphql';

function posToOffset(doc, pos) {
    return doc.line(pos.line + 1).from + pos.character;
}
function offsetToPos(doc, offset) {
    const line = doc.lineAt(offset);
    return new Position(line.number - 1, offset - line.from);
}
class Position {
    constructor(line, character) {
        this.line = line;
        this.character = character;
    }
    setLine(line) {
        this.line = line;
    }
    setCharacter(character) {
        this.character = character;
    }
    lessThanOrEqualTo(position) {
        return (this.line < position.line ||
            (this.line === position.line && this.character <= position.character));
    }
}
const isMac = () => navigator.userAgent.includes('Mac');
const isMetaKeyPressed = (e) => isMac() ? e.metaKey : e.ctrlKey;

const schemaEffect = /*@__PURE__*/StateEffect.define();
const schemaStateField = /*@__PURE__*/StateField.define({
    create() { },
    update(schema, tr) {
        for (const e of tr.effects) {
            if (e.is(schemaEffect)) {
                return e.value;
            }
        }
        return schema;
    },
});
const optionsEffect = /*@__PURE__*/StateEffect.define();
const optionsStateField = /*@__PURE__*/StateField.define({
    create() { },
    update(opts, tr) {
        for (const e of tr.effects) {
            if (e.is(optionsEffect)) {
                return e.value;
            }
        }
        return opts;
    },
});
const updateSchema = (view, schema) => {
    view.dispatch({
        effects: schemaEffect.of(schema),
    });
};
const updateOpts = (view, opts) => {
    view.dispatch({
        effects: optionsEffect.of(opts),
    });
};
const getSchema = (state) => {
    return state.field(schemaStateField);
};
const getOpts = (state) => {
    return state.field(optionsStateField);
};
const defaultOpts = {
    showErrorOnInvalidSchema: true,
};
const stateExtensions = (schema, opts) => [
    schemaStateField.init(() => schema),
    optionsStateField.init(() => (Object.assign(Object.assign({}, defaultOpts), opts))),
];

const fillAllFieldsCommands = (view) => {
    const schema = getSchema(view.state);
    if (!schema) {
        return true;
    }
    const opts = getOpts(view.state);
    const currentPosition = view.state.selection.main.head;
    const pos = offsetToPos(view.state.doc, currentPosition);
    const token = getTokenAtPosition(view.state.doc.toString(), pos);
    if (schema && (opts === null || opts === void 0 ? void 0 : opts.onFillAllFields)) {
        opts.onFillAllFields(view, schema, view.state.doc.toString(), pos, token);
    }
    return true;
};
const showInDocsCommand = (view) => {
    var _a, _b, _c;
    const schema = getSchema(view.state);
    if (!schema) {
        return true;
    }
    const opts = getOpts(view.state);
    const currentPosition = view.state.selection.main.head;
    const pos = offsetToPos(view.state.doc, currentPosition);
    const token = getTokenAtPosition(view.state.doc.toString(), pos);
    if (schema && (opts === null || opts === void 0 ? void 0 : opts.onShowInDocs)) {
        const tInfo = getTypeInfo(schema, token.state);
        opts.onShowInDocs((_a = tInfo.fieldDef) === null || _a === void 0 ? void 0 : _a.name, (_b = tInfo.type) === null || _b === void 0 ? void 0 : _b.toString(), (_c = tInfo.parentType) === null || _c === void 0 ? void 0 : _c.toString());
    }
    return true;
};

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_name = {__proto__:null,query:241, mutation:243, subscription:245, on:86, fragment:92, schema:102, scalar:114, type:120, implements:126, interface:140, union:146, enum:154, input:164, directive:172, repeatable:176, extend:192};
const parser = /*@__PURE__*/LRParser.deserialize({
  version: 14,
  states: "LWOYQPOOO!WQPO'#C}O!`QPO'#C_OOQO'#C_'#C_O!iQPO'#DYOOQO'#Ev'#EvOOQO'#D_'#D_O!nQPO'#D^O#_QPO'#D^O!iQPO'#DhO!iQPO'#DrO!iQPO'#DuO!iQPO'#DyO!iQPO'#EOOOQO'#Dd'#DdO#fQPO'#ESOOQO'#D]'#D]O!vQPO'#E^OOQO'#Ea'#EaOOQO'#E]'#E]OOQO'#FT'#FTOOQO'#Eu'#EuOOQO'#Eh'#EhQYQPOOOOQO'#C`'#C`OOQO'#DZ'#DZOOQO'#D`'#D`OOQO'#Di'#DiOOQO'#Ds'#DsOOQO'#Dv'#DvOOQO'#Dz'#DzOOQO'#EP'#EPOOQO'#ET'#ETOOQO'#E_'#E_O#kQPO'#CaO$VQPO'#DQO$[QPO'#DPO$sQPO'#DPO$xQPO'#DSO%WQPO'#DOOOQO'#En'#EnO%fQPO,59iOOQO'#Ca'#CaO%qQPO'#CxOOQO'#El'#ElO'hQPO'#CwO)[QPO'#CdOOQO,58y,58yO)aQPO,58yO)fQPO,58yO)nQPO,58yOOQO'#DT'#DTO)yQPO,59tO{QPO'#FUOOQO'#Db'#DbOOQO,59x,59xO*OQPO,59xO!nQPO,59xO!iQPO,5:PO!iQPO,5:SO!iQPO,5:^O!iQPO,5:aO!iQPO,5:eO!iQPO,5:jO*TQPO,5:nOOQO'#Df'#DfO*YQPO,5:SO+aQPO,5:^O,hQPO,5:aO-oQPO,5:eO.sQPO,5:jO/wQPO,5:nO!nQPO,5:xO!iQPO,5:|O!iQPO,5:}O!iQPO,5;OO!iQPO,5;PO!iQPO,5;QO!iQPO,5;ROOQO-E8f-E8fOOQO,59l,59lO0VQPO'#CzOOQO,59k,59kO0[QPO,59kO0mQPO,59kOOQO'#DR'#DRO0tQPO,59kO1OQPO,59nO!iQPO'#DVOOQO,59p,59pO)aQPO,59pO)fQPO,59pOOQO'#DW'#DWOOQO,59j,59jOOQO-E8l-E8lOOQO1G/T1G/TOOQO,59d,59dOOQO-E8j-E8jO1aQPO'#CeOOQO'#Ei'#EiO1fQPO,59OOOQO1G.e1G.eO)aQPO1G.eO)fQPO1G.eO)fQPO1G/`O1nQPO'#DcO1sQPO,5;pOOQO1G/d1G/dO*OQPO1G/dO1xQPO1G/kO4QQPO1G/nO5]QPO1G/xO6hQPO1G/{O7pQPO1G0PO8xQPO1G0UO/wQPO1G0YO9PQPO1G/nO9WQPO'#DkO9`QPO'#FWOOQO'#Dn'#DnOOQO1G/n1G/nO9hQPO1G/nOOQO'#Dl'#DlO:iQPO1G/xOOQO1G/x1G/xO:pQPO1G/xO;qQPO1G/{O;xQPO'#DxO5dQPO1G/{O<QQQO'#FYOOQO'#D|'#D|OOQO1G0P1G0PO6oQPO1G0PO9`QPO'#FZOOQO'#ER'#EROOQO1G0U1G0UO7wQPO1G0UO<YQPO'#DqO!iQPO'#DqOOQO'#Ep'#EpO<_QPO'#DpO<pQSO1G0YO)yQPO1G0YO>QQPO1G0YOOQO'#EV'#EVOOQO1G0d1G0dO>YQPO1G0dO!qQPO1G0hO?ZQPO1G0iO?ZQPO1G0jO?fQPO1G0kO?nQPO1G0lO?vQPO1G0mOOQO'#C|'#C|O@OQPO'#C{OOQO'#Em'#EmO@TQPO,59fOOQO1G/V1G/VO@]QPO1G/VO@nQPO1G/VOOQO1G/Y1G/YOOQO'#Cg'#CgOOQO,59q,59qOOQO1G/[1G/[O)aQPO1G/[O@uQPO,59POOQO-E8g-E8gOOQO1G.j1G.jOOQO7+$P7+$PO)aQPO7+$POOQO7+$z7+$zO)aQPO7+$zO!iQPO,59}OOQO1G1[1G1[OOQO7+%O7+%OOOQO7+%V7+%VOBOQPO7+%YOOQO7+%Y7+%YO@}QPO7+%YOCZQPO7+%dOOQO7+%d7+%dOBYQPO7+%dODfQPO7+%gODmQPO7+%gOOQO7+%k7+%kODtQPO7+%kOOQO7+%p7+%pOEuQPO7+%pO<pQSO7+%tO)yQPO7+%tO>QQPO7+%tO!iQPO,5:VOOQO,5:V,5:VOFvQPO'#DoO!iQPO'#DoOOQO'#Eo'#EoOGRQPO,5;rO!iQPO,5:dOOQO,5:d,5:dOG^QQO'#D}OGlQQO'#D}OOQO'#Eq'#EqOGqQQO,5;tOG|QPO,5;uO@uQPO,5:]OHXQPO,5:]OOQO-E8n-E8nOOQO'#EZ'#EZOOQO'#E['#E[OOQO'#EY'#EYOH^QPO7+%tOOQO'#EX'#EXO<sQSO'#EXOOQO7+&O7+&OOOQO7+&S7+&SOJcQPO7+&TOOQO7+&T7+&TOIbQPO7+&TOKnQPO7+&UOOQO7+&U7+&UOJmQPO7+&UOLyQPO7+&VOMQQPO7+&VOOQO7+&W7+&WOMXQPO7+&WOOQO7+&X7+&XONYQPO7+&XO! ZQQO,59gOOQO-E8k-E8kOOQO1G/Q1G/QOOQO7+$q7+$qO! xQPO7+$qOOQO7+$v7+$vO@uQPO'#CjO!!ZQPO'#E|OOQO'#E|'#E|O!#UQPO1G.kOOQO<<Gk<<GkOOQO<<Hf<<HfOOQO1G/i1G/iOOQO<<Ht<<HtO!#gQPO<<HtOOQO<<IO<<IOO!$hQPO<<IOO!%iQPO<<IROOQO<<IV<<IVOOQO<<I[<<I[O!&mQPO<<I`O<pQSO<<I`O)yQPO<<I`OOQO1G/q1G/qO@uQPO,5:ZO!'qQPO,5:ZO!'vQPO,5:ZOOQO-E8m-E8mOOQO1G1^1G1^OOQO1G0O1G0OO!(RQQO'#CxO!(dQQO'#CwOOQO,5:i,5:iO!(rQQO,5:iOOQO-E8o-E8oOOQO1G1`1G1`OOQO1G1a1G1aO!)QQPO1G/wO@uQPO1G/wO<sQSO,5:sOOQO,5:s,5:sOOQO<<Io<<IoO!)lQPO<<IoOOQO<<Ip<<IpO!*mQPO<<IpO!+nQPO<<IqOOQO<<Ir<<IrOOQO<<Is<<IsO!,rQQO'#CsO!,yQPO'#CvOOQO'#FP'#FPO!-RQPO1G/ROOQO<<H]<<H]O!-^QPO,59UOOQO,59V,59VO! ZQQO'#ClOOQO7+$V7+$VO!-cQPO7+$VO!-nQPO7+$VOOQOAN>`AN>`OOQOAN>jAN>jO!-|QPOAN>zO<pQSOAN>zO!/QQPO1G/uO@uQPO1G/uO!/`QPO1G/uOOQO1G0T1G0TOOQO7+%c7+%cO!/eQPO7+%cO!/|QPO7+%cOOQO1G0_1G0_OOQOAN?ZAN?ZOOQOAN?[AN?[O!0TQQO'#EjO!0xQQO,59_OOQO,59_,59_O!1PQPO'#FROOQO'#Ek'#EkO!1UQPO,59bOOQO,59b,59bOOQO7+$m7+$mOOQO1G.p1G.pOOQO,59W,59WOOQO<<Gq<<GqO!1^QPO<<GqO!1iQPOG24fOOQO7+%a7+%aO!2mQPO7+%aO@uQPO7+%aOOQO<<H}<<H}O!2{QPO<<H}OOQO,5;U,5;UOOQO-E8h-E8hOOQO1G.y1G.yO! ZQQO,5;mOOQO-E8i-E8iOOQO1G.|1G.|OOQOAN=]AN=]OOQO<<H{<<H{O!3dQPO<<H{OOQOAN>iAN>iO!3rQPO1G1XOOQOAN>gAN>gOOQO7+&s7+&s",
  stateData: "!4U~O#hOSPOS~OcUOiPO!OiO!TjO!^kO!hlO!kmO!onO!toO!xpO#SqO#lhO#mhO#nhO~O#krO#vvO~OV!OOiPOm{O#kzO~Oi!VOm{O~O!TjO!Z!cO!^kO!hlO!kmO!onO!toO~O!xpO~P!vOm!iO~OVuXhuXiuXmuX#kuX#oTX#tuX#vuX~O#o!rO~OV!sOiPOm{OhsX#ksX#tsX#vsX~O#k!wO~OiPOm{O{#OO#kzO~O#t#POhrX#krX#vrX~Oh#RO#krO#vvO~OV!sOilXmlXhlX#klX#tlX#vlXclX!OlX!TlX!^lX!hlX!klX!olX!tlX!xlX#SlX#flX#llX#mlX#nlX#rlXUlXYlX{lX!zlX#olX~Om{OikXhkX#kkX#tkX#vkXckX!OkX!TkX!^kX!hkX!kkX!okX!tkX!xkX#SkX#fkX#lkX#mkX#nkX#rkXUkXYkX{kX!zkX#okX~OY#UO~OiPO~OiPOm{O~OV!OOiPOm{O~O{#OO~Oi!VO~Om#gO~Oi#jOm{O!a#nOc![a!O![a!T![a!^![a!h![a!k![a!o![a!t![a!x![a#S![a#f![a#l![a#m![a#n![a~Oi#jOm{O!a#nOc!fa!O!fa!T!fa!^!fa!h!fa!k!fa!o!fa!t!fa!x!fa#S!fa#f!fa#l!fa#m!fa#n!fa~Om{O#r#sOc!iai!ia!O!ia!T!ia!^!ia!h!ia!k!ia!o!ia!t!ia!x!ia#S!ia#f!ia#l!ia#m!ia#n!ia~Oi#uOm{Oc!ma!O!ma!T!ma!^!ma!h!ma!k!ma!o!ma!t!ma!x!ma#S!ma#f!ma#l!ma#m!ma#n!ma~Oi#yOm{Oc!ra!O!ra!T!ra!^!ra!h!ra!k!ra!o!ra!t!ra!x!ra#S!ra#f!ra#l!ra#m!ra#n!ra~OcUO{#OO!z$UO#kzO~O#k$_O~OiPOhsa#ksa#tsa#vsa~Om{O~P0[OV!sOm{O~P0[Om{Ohva#kva#tva#vva~O#o$kO~OU$mOY#UO~O#o$rO~Oh$sO~Om{Oc!Xii!Xi!O!Xi!T!Xi!^!Xi!h!Xi!k!Xi!o!Xi!t!Xi!x!Xi#S!Xi#f!Xi#l!Xi#m!Xi#n!Xi~Oi#jOm{Oc![i!O![i!T![i!^![i!h![i!k![i!o![i!t![i!x![i#S![i#f![i#l![i#m![i#n![i~O!a#nO~P2|Oi#jOm{Oc!fi!O!fi!T!fi!^!fi!h!fi!k!fi!o!fi!t!fi!x!fi#S!fi#f!fi#l!fi#m!fi#n!fi~O!a#nO~P4XO#r#sOc!iii!ii!O!ii!T!ii!^!ii!h!ii!k!ii!o!ii!t!ii!x!ii#S!ii#f!ii#l!ii#m!ii#n!ii~Om{O~P5dOi#uOc!mi!O!mi!T!mi!^!mi!h!mi!k!mi!o!mi!t!mi!x!mi#S!mi#f!mi#l!mi#m!mi#n!mi~Om{O~P6oOi#yOc!ri!O!ri!T!ri!^!ri!h!ri!k!ri!o!ri!t!ri!x!ri#S!ri#f!ri#l!ri#m!ri#n!ri~Om{O~P7wO#y%VO~P2|O#kzO#y%VO~OcUO#kzO~Oi#jOc![i!O![i!T![i!^![i!h![i!k![i!o![i!t![i!x![i#S![i#f![i#l![i#m![i#n![i~O#y%VO~P4XOi#jOc!fi!O!fi!T!fi!^!fi!h!fi!k!fi!o!fi!t!fi!x!fi#S!fi#f!fi#l!fi#m!fi#n!fi~O#{%]O~P5gO#kzO#{%]O~OcUOf%_O~O#o%dO~OcUO#kzO{!dX!z!dX#o!dX~O#{%lO$O%gO$P%gO$Q%gO$R%gO$S%gO$T%gO$U%gO$V%gO$W%hO$X%hO$Y%hO$Z%hO$[%hO$]%hO$^%hO$_%hO$`%hO$a%hO$b%hO~O{#OO!z$UO~Oi!VOc#Qi!O#Qi!T#Qi!^#Qi!h#Qi!k#Qi!o#Qi!t#Qi!x#Qi#S#Qi#f#Qi#l#Qi#m#Qi#n#Qi~Oi#jOm{O!a#nO~Om{O#r#sO~Oi#uOm{O~Oi#yOm{O~O#o%{O~OU%}O#k$_O~OiPOhsi#ksi#tsi#vsi~Om{O~P@]O]&RO#kzO~Oi#jOc![q!O![q!T![q!^![q!h![q!k![q!o![q!t![q!x![q#S![q#f![q#l![q#m![q#n![q~Om{O#y%VO~P@}Oi#jOc!fq!O!fq!T!fq!^!fq!h!fq!k!fq!o!fq!t!fq!x!fq#S!fq#f!fq#l!fq#m!fq#n!fq~Om{O#y%VO~PBYOc!iqi!iq!O!iq!T!iq!^!iq!h!iq!k!iq!o!iq!t!iq!x!iq#S!iq#f!iq#l!iq#m!iq#n!iq~O#{%]O~PCeO#r#sO~PCeOi#uOc!mq!O!mq!T!mq!^!mq!h!mq!k!mq!o!mq!t!mq!x!mq#S!mq#f!mq#l!mq#m!mq#n!mq~Oi#yOc!rq!O!rq!T!rq!^!rq!h!rq!k!rq!o!rq!t!rq!x!rq#S!rq#f!rq#l!rq#m!rq#n!rq~OcUO#kzO#o&eO~OcUOh&iO#kzO~Om&kOc!qXf!qXh!qX~Of&nO~OcUOf%_Oh&pO~OcUOh&qO#kzO~O#o&sO~O#{&tOc!vqi!vq!O!vq!T!vq!^!vq!h!vq!k!vq!o!vq!t!vq!x!vq#S!vq#f!vq#l!vq#m!vq#n!vq~Oi#jOc#Vq!O#Vq!T#Vq!^#Vq!h#Vq!k#Vq!o#Vq!t#Vq!x#Vq#S#Vq#f#Vq#l#Vq#m#Vq#n#Vq~Om{O#y%VO~PIbOi#jOc#Wq!O#Wq!T#Wq!^#Wq!h#Wq!k#Wq!o#Wq!t#Wq!x#Wq#S#Wq#f#Wq#l#Wq#m#Wq#n#Wq~Om{O#y%VO~PJmOc#Xqi#Xq!O#Xq!T#Xq!^#Xq!h#Xq!k#Xq!o#Xq!t#Xq!x#Xq#S#Xq#f#Xq#l#Xq#m#Xq#n#Xq~O#{%]O~PKxO#r#sO~PKxOi#uOc#Yq!O#Yq!T#Yq!^#Yq!h#Yq!k#Yq!o#Yq!t#Yq!x#Yq#S#Yq#f#Yq#l#Yq#m#Yq#n#Yq~Oi#yOc#Zq!O#Zq!T#Zq!^#Zq!h#Zq!k#Zq!o#Zq!t#Zq!x#Zq#S#Zq#f#Zq#l#Zq#m#Zq#n#Zq~OY'PO]&}Oa'POb'POc'POd'POe'POf'POi'OO~OiPOhsq#ksq#tsq#vsq~O#q'TOU#pXY#pXm#pX#r#pX#t#pXc#pX{#pX!z#pX#k#pX[#pXh#pX#o#pX~Om{O#r'UO#t'VOUXiYXi~Oi#jOc![y!O![y!T![y!^![y!h![y!k![y!o![y!t![y!x![y#S![y#f![y#l![y#m![y#n![y~Oi#jOc!fy!O!fy!T!fy!^!fy!h!fy!k!fy!o!fy!t!fy!x!fy#S!fy#f!fy#l!fy#m!fy#n!fy~O#{%]Oc!iyi!iy!O!iy!T!iy!^!iy!h!iy!k!iy!o!iy!t!iy!x!iy#S!iy#f!iy#l!iy#m!iy#n!iy~O#{&tOc!vyi!vy!O!vy!T!vy!^!vy!h!vy!k!vy!o!vy!t!vy!x!vy#S!vy#f!vy#l!vy#m!vy#n!vy~O#o'_O~OcUO#kzO#o'_O~OV!sOclXflXhlXmlX~Om&kOckXfkXhkX~Om&kOc!qaf!qah!qa~Om{O#r'UOc!ei{!ei!z!ei#k!eih!ei#o!ei~Oi#jOc#Vy!O#Vy!T#Vy!^#Vy!h#Vy!k#Vy!o#Vy!t#Vy!x#Vy#S#Vy#f#Vy#l#Vy#m#Vy#n#Vy~Oi#jOc#Wy!O#Wy!T#Wy!^#Wy!h#Wy!k#Wy!o#Wy!t#Wy!x#Wy#S#Wy#f#Wy#l#Wy#m#Wy#n#Wy~O#{%]Oc#Xyi#Xy!O#Xy!T#Xy!^#Xy!h#Xy!k#Xy!o#Xy!t#Xy!x#Xy#S#Xy#f#Xy#l#Xy#m#Xy#n#Xy~O['jO~P! ZOh'nO#kzO~O#t'oOUoi#koi~O['pO~O#t'rOUXqYXq~Om{O#t'rOUXqYXq~O#{&tOc!v!Ri!v!R!O!v!R!T!v!R!^!v!R!h!v!R!k!v!R!o!v!R!t!v!R!x!v!R#S!v!R#f!v!R#l!v!R#m!v!R#n!v!R~Om{Oc!cih!ci#k!ci~O#o'wO~Om{Oc!eq{!eq!z!eq#k!eqh!eq#o!eq~O#r'UO~P!/eO#t'zOY#^X[#^X]#^Xa#^Xb#^Xc#^Xd#^Xe#^Xf#^Xi#^X~O['|O~P! ZO#o'}O~Oh(PO#kzO~O#t(QOUXyYXy~O#{&tOc!v!Zi!v!Z!O!v!Z!T!v!Z!^!v!Z!h!v!Z!k!v!Z!o!v!Z!t!v!Z!x!v!Z#S!v!Z#f!v!Z#l!v!Z#m!v!Z#n!v!Z~Om{Oc!cqh!cq#k!cq~Om{Oc!ey{!ey!z!ey#k!eyh!ey#o!ey~Om{Oc!cyh!cy#k!cy~O#t(WOh#ui#k#ui~Obdaefe~",
  goto: ":k$OPPP$P$T$[PP&d&jP&nPP'Z'd'mPPPPPP'vPP'v'}*|P,T,_,c,g-k-o-s-w-o.O-o.U.[P$P.oP.s.w.{/bP/l/|.w0P0TP0P0ZP0e0wP1P2T2X2e0P2nP0P2xP3S0P3dP3n4O0P4SP4^.w4nP4uP5P5]5i5i.s5q5uP5q5y5y5y5y5y5y5}6T6Z6a6g7r7x8O8U8cPPP8i8mPPPPP8qPP9WP9eP8m9iP9qP:Z:cTTOgSQOgR#]!VSsPyQ!SQS!TSvQ!dXQ!eYQ!fZQ!g[Q!h]Q#a![Q#b!]Q#c!^Q#d!_Q#e!`Q#f!a^#}!i#g#y$Q%X%c&gQ$X!kQ$Y!lQ$Z!mQ$[!nQ$]!oQ$^!pj$g!z#i#s$k$r%V%]%d&R&e&s'_'wS%X#j%[Q%e$OQ&g%YT'k'O'mQ!RQR#Z!ST#V!O#WQ$h!zQ%W#iQ%^#s^&S$k%d&R&e&s'_'wQ&X$rQ&d%VR&j%]_&S$k%d&R&e&s'_'w_&T$k%d&R&e&s'_'wQ'X&UQ'c&rR'y'dZ'P%{&}'U'i'}Q!QQQ!YVQ!utQ!|vS#Y!R!SQ#`!ZQ#m!dQ#q!eQ#t!fQ#x!gQ#|!hQ$W!jS$d!v!xQ$f!yQ$j!}Q$o#ZQ$q#[Q$u#aS$x#b#hS${#c#oQ$}#dQ%P#eQ%R#fQ%n$XQ%q$YQ%t$ZQ%v$[Q%x$]Q%z$^Q&P$eQ&Z$vQ&]$yQ&m%_Q&w%oQ&y%rQ'W&UQ'a&nQ'b&rQ's'XQ'u'^S'x'c'dQ(R'vQ(T'yR(V(S#Z|QVtv}!R!S!Z!d!e!f!g!h!j!v!x!y!}#Z#[#a#b#c#d#e#f#h#o$X$Y$Z$[$]$^$e$v$y%_%o%r&U&l&n&r'X'^'c'd'v'y(SQ!vtS#S{&kR$e!xT$a!s$bT$`!s$bSROgQ!PQQ!ttQ!{vU#X!Q!R!SU$c!u!v!xS$i!|!}S$n#Y#ZQ$p#[S&O$d$eQ&Q$jQ&V$oQ&W$qR'R&PTxPyTwPyTuPyStPyR!xuQ!USR!yvQ!}vR#[!US!zv!UQ$R!iU%S#g$S$TS&b%T%UR']&cTSOgTdOgT`OgSWOg^$O!i#g#y$Q%X%c&gS%Y#j%[T%`#u%bSVOgQ!ZWR!jaQ!XVS#_!Y!ZQ$V!jQ$t#`R%m$WR#^!VT^OgQ![WR!kaSXOgQ!]WR!laQ#h!dQ#o!eQ$v#bQ$y#cQ%o$YR%r$Z]#i!d!e#b#c$Y$ZQ#l!dQ#p!eU$w#b#h#mU$z#c#o#qQ%p$YQ%s$ZS&Y$v$xS&[$y${S&v%o%qS&x%r%tQ'Y&ZQ'Z&]Q'f&wR'g&yT%Z#j%[Q$T!iQ%U#gQ&f%XR'`&g_$P!i#g#y$Q%X%c&gSYOgQ!^WR!maSZOgQ!_WR!naQ#r!fS$|#d#tQ%u$[Q&^$}R&z%vS[OgQ!`WR!oaQ#w!gS%O#e#xQ%w$]Q&_%PR&{%xT%a#u%bS]OgQ!aWR!paQ#{!hS%Q#f#|Q%y$^Q&`%RR&|%zS_OgR!bWQ$S!iS%T#g$TR&c%UQ%j$RQ&a%SQ'[&bR't']W%k$R%S&b']Q&u%lR'e&t]%i$R%S%l&b&t']TcOgTaOgTbOgQgOR!qgQ#W!OR$l#WQ'i&}R'{'iQ'm'OR(O'm#Q}QVtv!R!S!Z!d!e!f!g!h!j!v!x!y!}#Z#[#a#b#c#d#e#f#h#o$X$Y$Z$[$]$^$e$v$y%o%r&U&r'X'^'c'd'v'y(SS#T}&lT&l%_&nQ$b!sR%|$bQyPR#QyQ%[#jR&h%[W$Q!i#g%X&gQ%c#yT%f$Q%cQ%b#uR&o%bTfOgTeOgQ&U$kQ&r%dQ'S&RQ'^&eQ'd&sQ'v'_R(S'wQ'Q%{S'h&}'iQ'q'UR(U'}T'l'O'm]!WV!Y!Z!j#`$W}#k!d!e#b#c#h#m#o#q$Y$Z$v$x$y${%o%q%r%t&Z&]&w&y]#v!g#e#x$]%P%x]#z!h#f#|$^%R%z",
  nodeNames: "⚠ Comment Document OperationDefinition OperationType Name ) ( VariableDefinitions VariableDefinition Variable NamedType ] [ ListType NonNullType DefaultValue IntValue FloatValue StringValue BooleanValue NullValue EnumValue ListValue } { ObjectValue Directives Directive DirectiveName Arguments Argument ArgumentAttributeName SelectionSet Selection Field Alias FieldName FragmentSpread FragmentName InlineFragment TypeCondition OnKeyword on FragmentDefinition FragmentKeyword fragment TypeSystemDefinition SchemaDefinition Description SchemaKeyword schema RootTypeDefinition RootOperationTypeDefinition TypeDefinition ScalarTypeDefinition ScalarKeyword scalar ObjectTypeDefinition TypeKeyword type ImplementsInterfaces ImplementsKeyword implements FieldsDefinition FieldDefinition ArgumentsDefinition InputValueDefinition InterfaceTypeDefinition InterfaceKeyword interface UnionTypeDefinition UnionKeyword union UnionMemberTypes EnumTypeDefinition EnumKeyword enum EnumValuesDefinition EnumValueDefinition InputObjectTypeDefinition InputKeyword input InputFieldsDefinition DirectiveDefinition DirectiveKeyword directive RepeatableKeyword repeatable DirectiveLocations DirectiveLocation ExecutableDirectiveLocation TypeSystemDirectiveLocation TypeSystemExtension SchemaExtension ExtendKeyword extend TypeExtension ScalarTypeExtension ObjectTypeExtension InterfaceTypeExtension UnionTypeExtension EnumTypeExtension InputObjectTypeExtension",
  maxTerm: 156,
  nodeProps: [
    ["openedBy", 6,"(",12,"[",24,"{"],
    ["closedBy", 7,")",13,"]",25,"}"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 10,
  tokenData: "#F]~R!XX^$npq$nqr%crs%hst7Wtu7ovw8^xy8cyz8h|}8m}!O8r!O!P:Z!Q![8x![!]:l!_!`:q!b!c:v!c!d;e!d!g<O!g!hE}!h!iKW!i!k<O!k!l!2j!l!o<O!o!p!LW!p!q<O!q!r#!a!r!s<O!s!t#%i!t!u<O!u!v#(W!v!w<O!w!x#3b!x!y#6P!y!}<O!}#O#@O#P#Q#@T#R#S<O#T#Y<O#Y#Z#@Y#Z#b<O#b#c#Bt#c#h<O#h#i#Dx#i#o<O#o#p#E|#p#q#FR#q#r#FW#y#z$n$f$g$n#BY#BZ$n$IS$I_$n$I|$JO$n$JT$JU$n$KV$KW$n&FU&FV$n~$sY#h~X^$npq$n#y#z$n$f$g$n#BY#BZ$n$IS$I_$n$I|$JO$n$JT$JU$n$KV$KW$n&FU&FV$n~%hO#q~~%kXOY&WZ]&W^r&Wrs(ss#O&W#O#P&{#P;'S&W;'S;=`(m<%lO&W~&ZXOY&WZ]&W^r&Wrs&vs#O&W#O#P&{#P;'S&W;'S;=`(m<%lO&W~&{Oc~~'OXrs&W!P!Q&W#O#P&W#U#V&W#Y#Z&W#b#c&W#f#g&W#h#i&W#i#j'k~'nR!Q!['w!c!i'w#T#Z'w~'zR!Q![(T!c!i(T#T#Z(T~(WR!Q![(a!c!i(a#T#Z(a~(dR!Q![&W!c!i&W#T#Z&W~(pP;=`<%l&W~(xPc~rs({~)OZOY({YZ({Z]({]^)q^r({rs)ws#O({#O#P*s#P;'S({;'S;=`*m<%lO({~)tPYZ({~)zTOr({rs*Zs;'S({;'S;=`*m<%lO({~*^TOr({rs&vs;'S({;'S;=`*m<%lO({~*pP;=`<%l({~*vXrs+c!P!Q({#O#P({#U#V({#Y#Z({#b#c({#f#g({#h#i({#i#j6U~+fZOY({YZ({Z]({]^)q^r({rs,Xs#O({#O#P*s#P;'S({;'S;=`*m<%lO({~,[TOr({rs,ks;'S({;'S;=`*m<%lO({~,nZOY({YZ({Z]({]^({^r({rs-as#O({#O#P-u#P;'S({;'S;=`*m<%lO({~-fTc~Or({rs*Zs;'S({;'S;=`*m<%lO({~-xhOY({YZ({Z]({]^)q^r({rs/ds!P({!P!Q({!Q#O({#O#P-u#P#U({#U#V({#V#Y({#Y#Z({#Z#b({#b#c({#c#f({#f#g({#g#h({#h#i({#i#j1d#j;'S({;'S;=`*m<%lO({~/gZOY({YZ({Z]({]^({^r({rs0Ys#O({#O#P-u#P;'S({;'S;=`*m<%lO({~0]TOr({rs0ls;'S({;'S;=`*m<%lO({~0qZc~OY({YZ({Z]({]^({^r({rs-as#O({#O#P-u#P;'S({;'S;=`*m<%lO({~1gaOY({YZ({Z]({]^)q^r({rs)ws!Q({!Q![2l![!c({!c!i2l!i#O({#O#P*s#P#T({#T#Z2l#Z;'S({;'S;=`*m<%lO({~2oaOY({YZ({Z]({]^)q^r({rs)ws!Q({!Q![3t![!c({!c!i3t!i#O({#O#P*s#P#T({#T#Z3t#Z;'S({;'S;=`*m<%lO({~3waOY({YZ({Z]({]^)q^r({rs)ws!Q({!Q![4|![!c({!c!i4|!i#O({#O#P*s#P#T({#T#Z4|#Z;'S({;'S;=`*m<%lO({~5PaOY({YZ({Z]({]^)q^r({rs)ws!Q({!Q![({![!c({!c!i({!i#O({#O#P*s#P#T({#T#Z({#Z;'S({;'S;=`*m<%lO({~6XR!Q![6b!c!i6b#T#Z6b~6eR!Q![6n!c!i6n#T#Z6n~6qR!Q![6z!c!i6z#T#Z6z~6}R!Q![({!c!i({#T#Z({~7]SP~OY7WZ;'S7W;'S;=`7i<%lO7W~7lP;=`<%l7W~7rR!c!}7{#R#S7{#T#o7{~8QSY~!Q![7{!c!}7{#R#S7{#T#o7{~8cO#y~~8hOV~~8mOU~~8rO#t~~8uP!Q![8x~8}Sa~!O!P9Z!Q![8x!g!h9o#X#Y9o~9^P!Q![9a~9fRb~!Q![9a!g!h9o#X#Y9o~9rR{|9{}!O9{!Q![:R~:OP!Q![:R~:WPb~!Q![:R~:^P!O!P:a~:dP!O!P:g~:lO#v~~:qO#o~~:vO#r~~:yR!c!};S#R#S;S#T#o;S~;XSm~!Q![;S!c!};S#R#S;S#T#o;SV;lU#kPfQ!Q![<O!c!t<O!t!u<c!u!}<O#R#S<O#T#o<OR<VS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV<jU#kPfQ!Q![<O!c!i<O!i!j<|!j!}<O#R#S<O#T#o<OV=TU#kPfQ!Q![<O!c!w<O!w!x=g!x!}<O#R#S<O#T#o<OV=nU#kPfQ!Q![<O!c!o<O!o!p>Q!p!}<O#R#S<O#T#o<OV>XU#kPfQ!Q![<O!c!g<O!g!h>k!h!}<O#R#S<O#T#o<OV>rU#kPfQ!Q![<O!c!p<O!p!q?U!q!}<O#R#S<O#T#o<OV?]U#kPfQ!Q![<O!c!v<O!v!w?o!w!}<O#R#S<O#T#o<OV?vS#kPfQ!Q![<O!c!}<O#R#S@S#T#o<OV@ZU#kPfQ!Q![<O!c!f<O!f!g@m!g!}<O#R#S<O#T#o<OV@tU#kPfQ!Q![<O!c!g<O!g!hAW!h!}<O#R#S<O#T#o<OVA_U#kPfQ!Q![<O!c!h<O!h!iAq!i!}<O#R#S<O#T#o<OVAxU#kPfQ!Q![<O!c!k<O!k!lB[!l!}<O#R#S<O#T#o<OVBcU#kPfQ!Q![<O!c!p<O!p!qBu!q!}<O#R#S<O#T#o<OVB|U#kPfQ!Q![<O!c!k<O!k!lC`!l!}<O#R#S<O#T#o<OVCgU#kPfQ!Q![<O!c!v<O!v!wCy!w!}<O#R#S<O#T#o<OVDQU#kPfQ!Q![<O!c!k<O!k!lDd!l!}<O#R#S<O#T#o<OVDkU#kPfQ!Q![<O!c!q<O!q!rD}!r!}<O#R#S<O#T#o<OVEUU#kPfQ!Q![<O!c!p<O!p!qEh!q!}<O#R#S<O#T#o<OVEqS$[S#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OVFUU#kPfQ!Q![<O!c!p<O!p!qFh!q!}<O#R#S<O#T#o<OVFoU#kPfQ!Q![<O!c!w<O!w!xGR!x!}<O#R#S<O#T#o<OVGYU#kPfQ!Q![<O!c!o<O!o!pGl!p!}<O#R#S<O#T#o<OVGuS$_S#kPfQ!Q![<O!c!}<O#R#SHR#T#o<OVHYU#kPfQ!Q![<O!c!x<O!x!yHl!y!}<O#R#S<O#T#o<OVHsT#kPfQ!Q![<O!c!dIS!d!}<O#R#S<O#T#o<OVIZU#kPfQ!Q![<O!c!n<O!n!oIm!o!}<O#R#S<O#T#o<OVItU#kPfQ!Q![<O!c!w<O!w!xJW!x!}<O#R#S<O#T#o<OVJ_U#kPfQ!Q![<O!c!g<O!g!hJq!h!}<O#R#S<O#T#o<OVJzS$`S#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OVK_W#kPfQ!Q![<O!c!k<O!k!lKw!l!t<O!t!u!%v!u!}<O#R#S<O#T#o<OVLOU#kPfQ!Q![<O!c!g<O!g!hLb!h!}<O#R#S<O#T#o<OVLiU#kPfQ!Q![<O!c!n<O!n!oL{!o!}<O#R#S<O#T#o<OVMSU#kPfQ!Q![<O!c!f<O!f!gMf!g!}<O#R#S<O#T#o<OVMoS$RS#kPfQ!Q![<O!c!}<O#R#SM{#T#o<OVNSU#kPfQ!Q![<O!c!f<O!f!gNf!g!}<O#R#S<O#T#o<OVNmU#kPfQ!Q![<O!c!g<O!g!h! P!h!}<O#R#S<O#T#o<OV! WU#kPfQ!Q![<O!c!h<O!h!i! j!i!}<O#R#S<O#T#o<OV! qU#kPfQ!Q![<O!c!k<O!k!l!!T!l!}<O#R#S<O#T#o<OV!![U#kPfQ!Q![<O!c!p<O!p!q!!n!q!}<O#R#S<O#T#o<OV!!uU#kPfQ!Q![<O!c!k<O!k!l!#X!l!}<O#R#S<O#T#o<OV!#`U#kPfQ!Q![<O!c!v<O!v!w!#r!w!}<O#R#S<O#T#o<OV!#yU#kPfQ!Q![<O!c!k<O!k!l!$]!l!}<O#R#S<O#T#o<OV!$dU#kPfQ!Q![<O!c!q<O!q!r!$v!r!}<O#R#S<O#T#o<OV!$}U#kPfQ!Q![<O!c!p<O!p!q!%a!q!}<O#R#S<O#T#o<OV!%jS$ZS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!%}T#kPfQ!Q![<O!c!d!&^!d!}<O#R#S<O#T#o<OV!&eU#kPfQ!Q![<O!c!i<O!i!j!&w!j!}<O#R#S<O#T#o<OV!'OU#kPfQ!Q![<O!c!o<O!o!p!'b!p!}<O#R#S<O#T#o<OV!'iU#kPfQ!Q![<O!c!g<O!g!h!'{!h!}<O#R#S<O#T#o<OV!(SU#kPfQ!Q![<O!c!p<O!p!q!(f!q!}<O#R#S<O#T#o<OV!(mU#kPfQ!Q![<O!c!v<O!v!w!)P!w!}<O#R#S<O#T#o<OV!)WS#kPfQ!Q![<O!c!}<O#R#S!)d#T#o<OV!)kW#kPfQ!Q![<O!c!f<O!f!g!*T!g!u<O!u!v!/e!v!}<O#R#S<O#T#o<OV!*[U#kPfQ!Q![<O!c!g<O!g!h!*n!h!}<O#R#S<O#T#o<OV!*uU#kPfQ!Q![<O!c!h<O!h!i!+X!i!}<O#R#S<O#T#o<OV!+`U#kPfQ!Q![<O!c!k<O!k!l!+r!l!}<O#R#S<O#T#o<OV!+yU#kPfQ!Q![<O!c!p<O!p!q!,]!q!}<O#R#S<O#T#o<OV!,dU#kPfQ!Q![<O!c!k<O!k!l!,v!l!}<O#R#S<O#T#o<OV!,}U#kPfQ!Q![<O!c!v<O!v!w!-a!w!}<O#R#S<O#T#o<OV!-hU#kPfQ!Q![<O!c!k<O!k!l!-z!l!}<O#R#S<O#T#o<OV!.RU#kPfQ!Q![<O!c!q<O!q!r!.e!r!}<O#R#S<O#T#o<OV!.lU#kPfQ!Q![<O!c!p<O!p!q!/O!q!}<O#R#S<O#T#o<OV!/XS$SS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!/lU#kPfQ!Q![<O!c!r<O!r!s!0O!s!}<O#R#S<O#T#o<OV!0VU#kPfQ!Q![<O!c!t<O!t!u!0i!u!}<O#R#S<O#T#o<OV!0pU#kPfQ!Q![<O!c!g<O!g!h!1S!h!}<O#R#S<O#T#o<OV!1ZT#kPfQ!Q![<O!c!d!1j!d!}<O#R#S<O#T#o<OV!1qU#kPfQ!Q![<O!c!f<O!f!g!2T!g!}<O#R#S<O#T#o<OV!2^S$TS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!2qU#kPfQ!Q![<O!c!p<O!p!q!3T!q!}<O#R#S<O#T#o<OV!3[Y#kPfQ!Q![<O!c!n<O!n!o!3z!o!r<O!r!s!:p!s!v<O!v!w!Hh!w!}<O#R#S<O#T#o<OV!4RU#kPfQ!Q![<O!c!k<O!k!l!4e!l!}<O#R#S<O#T#o<OV!4lU#kPfQ!Q![<O!c!p<O!p!q!5O!q!}<O#R#S<O#T#o<OV!5VU#kPfQ!Q![<O!c!g<O!g!h!5i!h!}<O#R#S<O#T#o<OV!5pS#kPfQ!Q![<O!c!}<O#R#S!5|#T#o<OV!6TU#kPfQ!Q![<O!c!h<O!h!i!6g!i!}<O#R#S<O#T#o<OV!6nU#kPfQ!Q![<O!c!t<O!t!u!7Q!u!}<O#R#S<O#T#o<OV!7XT#kPfQ!Q![<O!c!d!7h!d!}<O#R#S<O#T#o<OV!7oU#kPfQ!Q![<O!c!i<O!i!j!8R!j!}<O#R#S<O#T#o<OV!8YU#kPfQ!Q![<O!c!o<O!o!p!8l!p!}<O#R#S<O#T#o<OV!8sU#kPfQ!Q![<O!c!g<O!g!h!9V!h!}<O#R#S<O#T#o<OV!9^U#kPfQ!Q![<O!c!p<O!p!q!9p!q!}<O#R#S<O#T#o<OV!9wU#kPfQ!Q![<O!c!v<O!v!w!:Z!w!}<O#R#S<O#T#o<OV!:dS$US#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!:wU#kPfQ!Q![<O!c!w<O!w!x!;Z!x!}<O#R#S<O#T#o<OV!;bU#kPfQ!Q![<O!c!v<O!v!w!;t!w!}<O#R#S<O#T#o<OV!;{S#kPfQ!Q![<O!c!}<O#R#S!<X#T#o<OV!<`W#kPfQ!Q![<O!c!h<O!h!i!<x!i!q<O!q!r!E`!r!}<O#R#S<O#T#o<OV!=PU#kPfQ!Q![<O!c!k<O!k!l!=c!l!}<O#R#S<O#T#o<OV!=jU#kPfQ!Q![<O!c!g<O!g!h!=|!h!}<O#R#S<O#T#o<OV!>TU#kPfQ!Q![<O!c!n<O!n!o!>g!o!}<O#R#S<O#T#o<OV!>nU#kPfQ!Q![<O!c!f<O!f!g!?Q!g!}<O#R#S<O#T#o<OV!?XS#kPfQ!Q![<O!c!}<O#R#S!?e#T#o<OV!?lU#kPfQ!Q![<O!c!f<O!f!g!@O!g!}<O#R#S<O#T#o<OV!@VU#kPfQ!Q![<O!c!g<O!g!h!@i!h!}<O#R#S<O#T#o<OV!@pU#kPfQ!Q![<O!c!h<O!h!i!AS!i!}<O#R#S<O#T#o<OV!AZU#kPfQ!Q![<O!c!k<O!k!l!Am!l!}<O#R#S<O#T#o<OV!AtU#kPfQ!Q![<O!c!p<O!p!q!BW!q!}<O#R#S<O#T#o<OV!B_U#kPfQ!Q![<O!c!k<O!k!l!Bq!l!}<O#R#S<O#T#o<OV!BxU#kPfQ!Q![<O!c!v<O!v!w!C[!w!}<O#R#S<O#T#o<OV!CcU#kPfQ!Q![<O!c!k<O!k!l!Cu!l!}<O#R#S<O#T#o<OV!C|U#kPfQ!Q![<O!c!q<O!q!r!D`!r!}<O#R#S<O#T#o<OV!DgU#kPfQ!Q![<O!c!p<O!p!q!Dy!q!}<O#R#S<O#T#o<OV!ESS$bS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!EgU#kPfQ!Q![<O!c!d<O!d!e!Ey!e!}<O#R#S<O#T#o<OV!FQU#kPfQ!Q![<O!c!l<O!l!m!Fd!m!}<O#R#S<O#T#o<OV!FkU#kPfQ!Q![<O!c!g<O!g!h!F}!h!}<O#R#S<O#T#o<OV!GUU#kPfQ!Q![<O!c!e<O!e!f!Gh!f!}<O#R#S<O#T#o<OV!GoU#kPfQ!Q![<O!c!v<O!v!w!HR!w!}<O#R#S<O#T#o<OV!H[S$aS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!HoU#kPfQ!Q![<O!c!g<O!g!h!IR!h!}<O#R#S<O#T#o<OV!IYU#kPfQ!Q![<O!c!t<O!t!u!Il!u!}<O#R#S<O#T#o<OV!IsU#kPfQ!Q![<O!c!h<O!h!i!JV!i!}<O#R#S<O#T#o<OV!J^T#kPfQ!Q![<O!c!d!Jm!d!}<O#R#S<O#T#o<OV!JtU#kPfQ!Q![<O!c!e<O!e!f!KW!f!}<O#R#S<O#T#o<OV!K_U#kPfQ!Q![<O!c!g<O!g!h!Kq!h!}<O#R#S<O#T#o<OV!KzS$]S#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV!L_U#kPfQ!Q![<O!c!w<O!w!x!Lq!x!}<O#R#S<O#T#o<OV!LxU#kPfQ!Q![<O!c!v<O!v!w!M[!w!}<O#R#S<O#T#o<OV!McT#kPfQ!Q![<O!c!d!Mr!d!}<O#R#S<O#T#o<OV!MyU#kPfQ!Q![<O!c!v<O!v!w!N]!w!}<O#R#S<O#T#o<OV!NdU#kPfQ!Q![<O!c!k<O!k!l!Nv!l!}<O#R#S<O#T#o<OV!N}U#kPfQ!Q![<O!c!q<O!q!r# a!r!}<O#R#S<O#T#o<OV# hU#kPfQ!Q![<O!c!p<O!p!q# z!q!}<O#R#S<O#T#o<OV#!TS$PS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#!hU#kPfQ!Q![<O!c!d<O!d!e#!z!e!}<O#R#S<O#T#o<OV##RU#kPfQ!Q![<O!c!l<O!l!m##e!m!}<O#R#S<O#T#o<OV##lU#kPfQ!Q![<O!c!g<O!g!h#$O!h!}<O#R#S<O#T#o<OV#$VU#kPfQ!Q![<O!c!e<O!e!f#$i!f!}<O#R#S<O#T#o<OV#$pU#kPfQ!Q![<O!c!v<O!v!w#%S!w!}<O#R#S<O#T#o<OV#%]S$YS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#%pU#kPfQ!Q![<O!c!w<O!w!x#&S!x!}<O#R#S<O#T#o<OV#&ZU#kPfQ!Q![<O!c!g<O!g!h#&m!h!}<O#R#S<O#T#o<OV#&tU#kPfQ!Q![<O!c!t<O!t!u#'W!u!}<O#R#S<O#T#o<OV#'_U#kPfQ!Q![<O!c!{<O!{!|#'q!|!}<O#R#S<O#T#o<OV#'zS$OS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#(_W#kPfQ!Q![<O!c!e<O!e!f#(w!f!w<O!w!x#-g!x!}<O#R#S<O#T#o<OV#)OV#kPfQ!Q![<O!c!d#)e!d!j<O!j!k#+f!k!}<O#R#S<O#T#o<OV#)lU#kPfQ!Q![<O!c!n<O!n!o#*O!o!}<O#R#S<O#T#o<OV#*VT#kPfQ!Q![<O!c!d#*f!d!}<O#R#S<O#T#o<OV#*mU#kPfQ!Q![<O!c!t<O!t!u#+P!u!}<O#R#S<O#T#o<OV#+YS$XS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#+mU#kPfQ!Q![<O!c!g<O!g!h#,P!h!}<O#R#S<O#T#o<OV#,WU#kPfQ!Q![<O!c!o<O!o!p#,j!p!}<O#R#S<O#T#o<OV#,qT#kPfQ!Q![<O!c!d#-Q!d!}<O#R#S<O#T#o<OV#-ZS$WS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#-nU#kPfQ!Q![<O!c!d<O!d!e#.Q!e!}<O#R#S<O#T#o<OV#.XU#kPfQ!Q![<O!c!u<O!u!v#.k!v!}<O#R#S<O#T#o<OV#.rU#kPfQ!Q![<O!c!e<O!e!f#/U!f!}<O#R#S<O#T#o<OV#/]U#kPfQ!Q![<O!c!t<O!t!u#/o!u!}<O#R#S<O#T#o<OV#/vU#kPfQ!Q![<O!c!k<O!k!l#0Y!l!}<O#R#S<O#T#o<OV#0aU#kPfQ!Q![<O!c!r<O!r!s#0s!s!}<O#R#S<O#T#o<OV#0zU#kPfQ!Q![<O!c!v<O!v!w#1^!w!}<O#R#S<O#T#o<OV#1eU#kPfQ!Q![<O!c!k<O!k!l#1w!l!}<O#R#S<O#T#o<OV#2OU#kPfQ!Q![<O!c!q<O!q!r#2b!r!}<O#R#S<O#T#o<OV#2iU#kPfQ!Q![<O!c!p<O!p!q#2{!q!}<O#R#S<O#T#o<OV#3US$QS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#3iU#kPfQ!Q![<O!c!p<O!p!q#3{!q!}<O#R#S<O#T#o<OV#4SU#kPfQ!Q![<O!c!k<O!k!l#4f!l!}<O#R#S<O#T#o<OV#4mU#kPfQ!Q![<O!c!q<O!q!r#5P!r!}<O#R#S<O#T#o<OV#5WU#kPfQ!Q![<O!c!p<O!p!q#5j!q!}<O#R#S<O#T#o<OV#5sS$^S#kPfQ!Q![<O!c!}<O#R#S<O#T#o<OV#6WT#kPfQ!Q![<O!c!d#6g!d!}<O#R#S<O#T#o<OV#6nU#kPfQ!Q![<O!c!t<O!t!u#7Q!u!}<O#R#S<O#T#o<OV#7XU#kPfQ!Q![<O!c!k<O!k!l#7k!l!}<O#R#S<O#T#o<OV#7rT#kPfQ!Q![<O!c!d#8R!d!}<O#R#S<O#T#o<OV#8YU#kPfQ!Q![<O!c!d<O!d!e#8l!e!}<O#R#S<O#T#o<OV#8sU#kPfQ!Q![<O!c!n<O!n!o#9V!o!}<O#R#S<O#T#o<OV#9^U#kPfQ!Q![<O!c!g<O!g!h#9p!h!}<O#R#S<O#T#o<OV#9wS#kPfQ!Q![<O!c!}<O#R#S#:T#T#o<OV#:[U#kPfQ!Q![<O!c!f<O!f!g#:n!g!}<O#R#S<O#T#o<OV#:uU#kPfQ!Q![<O!c!g<O!g!h#;X!h!}<O#R#S<O#T#o<OV#;`U#kPfQ!Q![<O!c!h<O!h!i#;r!i!}<O#R#S<O#T#o<OV#;yU#kPfQ!Q![<O!c!k<O!k!l#<]!l!}<O#R#S<O#T#o<OV#<dU#kPfQ!Q![<O!c!p<O!p!q#<v!q!}<O#R#S<O#T#o<OV#<}U#kPfQ!Q![<O!c!k<O!k!l#=a!l!}<O#R#S<O#T#o<OV#=hU#kPfQ!Q![<O!c!v<O!v!w#=z!w!}<O#R#S<O#T#o<OV#>RU#kPfQ!Q![<O!c!k<O!k!l#>e!l!}<O#R#S<O#T#o<OV#>lU#kPfQ!Q![<O!c!q<O!q!r#?O!r!}<O#R#S<O#T#o<OV#?VU#kPfQ!Q![<O!c!p<O!p!q#?i!q!}<O#R#S<O#T#o<OV#?rS$VS#kPfQ!Q![<O!c!}<O#R#S<O#T#o<O~#@TO]~~#@YO[~R#@aT#kPfQ!Q![<O!c!}<O#R#S<O#T#U#@p#U#o<OR#@wU#kPfQ!Q![<O!c!}<O#R#S<O#T#`<O#`#a#AZ#a#o<OR#AbU#kPfQ!Q![<O!c!}<O#R#S<O#T#g<O#g#h#At#h#o<OR#A{U#kPfQ!Q![<O!c!}<O#R#S<O#T#X<O#X#Y#B_#Y#o<OR#BhS#kPdQfQ!Q![<O!c!}<O#R#S<O#T#o<OR#B{U#kPfQ!Q![<O!c!}<O#R#S<O#T#i<O#i#j#C_#j#o<OR#CfU#kPfQ!Q![<O!c!}<O#R#S<O#T#`<O#`#a#Cx#a#o<OR#DPU#kPfQ!Q![<O!c!}<O#R#S<O#T#`<O#`#a#Dc#a#o<OR#DlS#kPeQfQ!Q![<O!c!}<O#R#S<O#T#o<OR#EPU#kPfQ!Q![<O!c!}<O#R#S<O#T#f<O#f#g#Ec#g#o<OR#EjU#kPfQ!Q![<O!c!}<O#R#S<O#T#i<O#i#j#At#j#o<O~#FROi~~#FWO#{~~#F]Oh~",
  tokenizers: [0, 1, 2],
  topRules: {"Document":[0,2]},
  specialized: [{term: 119, get: (value) => spec_name[value] || -1}],
  tokenPrec: 2989
});

const nodesWithBraces = 'RootTypeDefinition InputFieldsDefinition EnumValuesDefinition FieldsDefinition SelectionSet { }';
const keywords = 'scalar type interface union enum input implements fragment extend schema directive on repeatable';
const punctuations = '( ) { } : [ ]';
const graphqlLanguage = /*@__PURE__*/LRLanguage.define({
    parser: /*@__PURE__*/parser.configure({
        props: [
            /*@__PURE__*/styleTags({
                Variable: tags.variableName,
                BooleanValue: tags.bool,
                Description: tags.string,
                StringValue: tags.string,
                Comment: tags.lineComment,
                IntValue: tags.integer,
                FloatValue: tags.float,
                EnumValue: /*@__PURE__*/tags.special(tags.name),
                NullValue: tags.null,
                DirectiveName: tags.modifier,
                [keywords]: tags.keyword,
                OperationType: tags.definitionKeyword,
                FieldName: tags.propertyName,
                Field: tags.propertyName,
                ArgumentAttributeName: tags.attributeName,
                Name: tags.atom,
                '( )': tags.paren,
                '{ }': tags.brace,
                ',': tags.separator,
                [punctuations]: tags.punctuation,
            }),
            // https://codemirror.net/docs/ref/#language.indentNodeProp
            /*@__PURE__*/indentNodeProp.add({
                [nodesWithBraces]: /*@__PURE__*/delimitedIndent({ closing: '}', align: true }),
            }),
            /*@__PURE__*/foldNodeProp.add({
                [nodesWithBraces]: foldInside,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: '#' },
        indentOnInput: /^\s*(\{|\})$/,
    },
});
function graphqlLanguageSupport() {
    return new LanguageSupport(graphqlLanguage);
}

const AUTOCOMPLETE_CHARS = /^[a-zA-Z0-9_@(]$/;
const completion = /*@__PURE__*/graphqlLanguage.data.of({
    autocomplete(ctx) {
        const schema = getSchema(ctx.state);
        const opts = getOpts(ctx.state);
        if (!schema) {
            return null;
        }
        const word = ctx.matchBefore(/\w*/);
        if (!word) {
            return null;
        }
        const lastWordChar = word.text.split('').pop();
        if (!AUTOCOMPLETE_CHARS.test(lastWordChar) && !ctx.explicit) {
            return null;
        }
        const val = ctx.state.doc.toString();
        const pos = offsetToPos(ctx.state.doc, ctx.pos);
        const results = getAutocompleteSuggestions(schema, val, pos, undefined, undefined, opts === null || opts === void 0 ? void 0 : opts.autocompleteOptions);
        if (results.length === 0) {
            return null;
        }
        return {
            from: word.from,
            options: results.map(item => {
                return {
                    label: item.label,
                    detail: item.detail || '',
                    info(completionData) {
                        if (opts === null || opts === void 0 ? void 0 : opts.onCompletionInfoRender) {
                            return opts.onCompletionInfoRender(item, ctx, completionData);
                        }
                        if (item.documentation ||
                            (item.isDeprecated && item.deprecationReason)) {
                            const el = document.createElement('div');
                            el.textContent =
                                item.documentation || item.deprecationReason || '';
                            return el;
                        }
                    },
                };
            }),
        };
    },
});

const jump = /*@__PURE__*/EditorView.domEventHandlers({
    click(evt, view) {
        var _a, _b, _c;
        const schema = getSchema(view.state);
        if (!schema) {
            return;
        }
        // TODO: Set class on cm-editor when mod key is pressed, to style cursor and tokens
        const currentPosition = view.state.selection.main.head;
        const pos = offsetToPos(view.state.doc, currentPosition);
        const token = getTokenAtPosition(view.state.doc.toString(), pos);
        const tInfo = getTypeInfo(schema, token.state);
        const opts = getOpts(view.state);
        if ((opts === null || opts === void 0 ? void 0 : opts.onShowInDocs) && isMetaKeyPressed(evt)) {
            opts.onShowInDocs((_a = tInfo.fieldDef) === null || _a === void 0 ? void 0 : _a.name, (_b = tInfo.type) === null || _b === void 0 ? void 0 : _b.toString(), (_c = tInfo.parentType) === null || _c === void 0 ? void 0 : _c.toString());
        }
    },
});

const SEVERITY = ['error', 'warning', 'info'];
const lint = /*@__PURE__*/linter(view => {
    const schema = getSchema(view.state);
    const options = getOpts(view.state);
    if (!schema) {
        return [];
    }
    const validationErrors = validateSchema(schema);
    if (validationErrors.length) {
        if (!(options === null || options === void 0 ? void 0 : options.showErrorOnInvalidSchema)) {
            return [];
        }
        const combinedError = validationErrors.map(error => {
            return error.message;
        });
        return [
            {
                from: 0,
                to: view.state.doc.length,
                severity: 'error',
                message: combinedError.join('\n'),
                actions: [], // TODO:
            },
        ];
    }
    const results = getDiagnostics(view.state.doc.toString(), schema);
    return results
        .map((item) => {
        if (!item.severity || !item.source) {
            return null;
        }
        const calculatedFrom = posToOffset(view.state.doc, new Position(item.range.start.line, item.range.start.character));
        const from = Math.max(0, Math.min(calculatedFrom, view.state.doc.length));
        const calculatedRo = posToOffset(view.state.doc, new Position(item.range.end.line, item.range.end.character - 1));
        const to = Math.min(Math.max(from + 1, calculatedRo), view.state.doc.length);
        return {
            from,
            to: from === to ? to + 1 : to,
            severity: SEVERITY[item.severity - 1],
            // source: item.source, // TODO:
            message: item.message,
            actions: [], // TODO:
        };
    })
        .filter((_) => Boolean(_));
}, {
    needsRefresh(vu) {
        return (vu.startState.field(schemaStateField) !==
            vu.state.field(schemaStateField) ||
            vu.startState.field(optionsStateField) !==
                vu.state.field(optionsStateField));
    },
});

function graphql(schema, opts) {
    return [
        graphqlLanguageSupport(),
        completion,
        lint,
        jump,
        stateExtensions(schema, opts),
    ];
}

export { Position, completion, fillAllFieldsCommands, getOpts, getSchema, graphql, graphqlLanguage, graphqlLanguageSupport, isMetaKeyPressed, jump, lint, offsetToPos, optionsStateField, posToOffset, schemaStateField, showInDocsCommand, stateExtensions, updateOpts, updateSchema };
